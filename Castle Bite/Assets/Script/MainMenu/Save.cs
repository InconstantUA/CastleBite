using System;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[Serializable]
public class SaveData: System.Object
{
    // this is used inside of the GameData (do not miss with SaveInfo, which stores GameData)
    // GameData is serialized
    // SaveInfo is not serialized
    public bool isAutosave; // indicates whether this save file was generated by autosave or not
}

[Serializable]
public class SaveInfo : System.Object
{
    // Minium save data, which is displayed in the load- and save game UI
    public string saveName;
    public DateTime date;
    public GameData gameData;
    // flag to identify if save is corrupted
    public bool isCorrupted;
    //// values below actually are read from other datas
    //public int turnNumber;
    //public PlayerData[] playersData;
}

public class Save : MonoBehaviour {
    SaveInfo saveInfo;

    public string SaveName
    {
        get
        {
            return saveInfo.saveName;
        }
    }

    public SaveInfo SaveInfo
    {
        get
        {
            return saveInfo;
        }

        set
        {
            saveInfo = value;
        }
    }

    //public void SetSaveInfo(save)
    //{
    //    //// init save info
    //    //if (this.saveInfo == null)
    //    //{
    //    //    this.saveInfo = new SaveInfo();
    //    //}
    //    //// get and set save info
    //    //this.
    //    saveInfo = ConfigManager GetSaveInfo(file);
    //}

    string GetSaveDisplayName()
    {
        string saveDisplayName = saveInfo.saveName;
        // verify if save is corrupted
        if (saveInfo.isCorrupted)
        {
            // add corrupted info next to the save name
            saveDisplayName += " (Corrupted)";
        }
        // pad right will calcualte number of spaces required to keep constant string length so brakets are always located at the edges
        // return result
        return "[ " + saveDisplayName.PadRight(28) + "]";
    }

    void OnEnable()
    {
        // rename game object 
        gameObject.name = SaveName;
        // set Toggle's text
        GetComponent<Text>().text = GetSaveDisplayName();
        //// verify if save is corrupted
        //if (this.saveInfo.isCorrupted)
        //{
        //    // make save non-interractable
        //    GetComponent<TextToggle>().SetInteractable(false);
        //}
    }
}
